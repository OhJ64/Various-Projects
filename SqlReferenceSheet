
/*SQL:
- select-from-where
- order-bys
- joins
- inserts, updates, deletes
- aggregates
- group-bys
- subqueries
- views
- functions*/

/*SELECT FROM WHERE*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
SELECT * FROM customer;

/*SELECT, FROM, WHERE*/
SELECT name, address, state 
FROM customer
WHERE name = "Bill Smith"; 

/*create a table called sad*//////////////////////////////////////////////////////////////////////////////////////////////////////
CREATE TABLE sad (
    id INTEGER,
    name TEXT
    );

/*Insert into Table*//////////////////////////////////////////////////////////////////////////////////////////////////////////////  
INSERT INTO sad (id, name)
VALUES (123456, "Jehysun Oh");


/*Update Table*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
UPDATE sad 
SET id = 54321, name = "Jason"
where id = 123456

/*dELETe*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
DELETE FROM sad 
WHERE name = "Jason"

DROP TABLE sad;


/*simple query*/ ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
SELECT name 
FROM sad
WHERE id = 123456
ORDER BY id
;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Group bys return rows that have similiar values into summary rows. 


/Types of Joins*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
● Inner Join - a join between tables such that the join will only return matched rows between two
tables.

● Outer Join - a join between tables such that the join will return matched rows between two
tables, in addition to other rows in some tables, depending on the type of join

○ Left Outer Join - this outer join will return rows that match between two tables, and also
all rows from the table in the FROM clause

○ Right Outer Join - this outer join will return rows that match between two tables, and
also all rows from the table in the JOIN clause

○ Full Outer Join - this outer join will return all matched rows, along with all other rows in
either table.


/*Using a Left Join*/////
FROM Person
LEFT JOIN Address
ON Person.PersonId = Address.PersonId;


SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;


/*Aggregate Functions//////////////////////////////////////////////////////////////////////////////////////////////////////////////
C. Aggregate Functions
AVG() returns the average value for a numeric column.
SELECT AVG(column_name)
FROM table_name;

SUM() returns the sum of all the values in a column.
SELECT SUM(column_name)
FROM table_name;

ROUND() rounds the values in the column to the number of decimal places specified by the integer.
SELECT ROUND(column_name, integer)
FROM table_name;

MAX() returns the largest value in a column.
SELECT MAX(column_name)
FROM table_name;

MIN() returns the smallest value in a column.
SELECT MIN(column_name)
FROM table_name;

COUNT() counts the number of rows where the column is not NULL.
SELECT COUNT(column_name)
FROM table_name;


/*Views*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
– virtual table based on result set of SQL statement 

CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers

CREATE VIEW [Products Above Average Price] AS
SELECT ProductName, Price
FROM Products
WHERE Price > (SELECT AVG(Price) FROM Products);

DROP VIEW [Brazil Customers];
WHERE Country = 'Brazil';


/*Subqueries*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Inner/nested query is a query within another query within the WHERE clause, used to further restrict data in main query. – Use Parenthesis to show subquery
SELECT * 
FROM CUSTOMERS 
WHERE ID IN (SELECT ID 
      FROM CUSTOMERS 
      WHERE SALARY > 4500) ;

